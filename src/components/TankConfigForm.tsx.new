import { useState } from 'react';
import { useForm, FormProvider } from 'react-hook-form';
import type { TankFormData, FormStep } from '../types/tankTypes';
import FormStepper from './FormStepper';
import Button from './ui/Button';
import Tank3DPreview from './Tank3DPreview';

// Import Step Components
import TankTypeStep from './steps/TankTypeStep';
import SpecificationsStep from './steps/SpecificationsStep';
import OrientationStep from './steps/OrientationStep';
import TopBottomStep from './steps/TopBottomStep';
import FinalDetailsStep from './steps/FinalDetailsStep';
import SummaryStep from './steps/SummaryStep';

const TankConfigForm = () => {
  const [currentStep, setCurrentStep] = useState(0);
  
  const methods = useForm<TankFormData>({
    defaultValues: {
      tankType: 'cylindrical',
      volume: 100,
      material: '304',
      orientation: 'vertical',
      legs: 4,
      topType: 'flat',
      bottomType: 'flat',
      flangeCount: 0,
      purpose: 'water',
    },
    mode: 'onChange',
  });
  
  const steps: FormStep[] = [
    { id: 'tank-type', label: 'Talpos Tipas' },
    { id: 'specifications', label: 'Specifikacijos' },
    { id: 'orientation', label: 'Orientacija' },
    { id: 'top-bottom', label: 'Viršus/Apačia' },
    { id: 'final-details', label: 'Detalės' },
    { id: 'summary', label: 'Suvestinė' },
  ];
  
  const stepComponents = [
    <TankTypeStep key="tank-type" />,
    <SpecificationsStep key="specifications" />,
    <OrientationStep key="orientation" />,
    <TopBottomStep key="top-bottom" />,
    <FinalDetailsStep key="final-details" />,
    <SummaryStep key="summary" />,
  ];

  const goToNextStep = async () => {
    // If we're on the last step, submit the form
    if (currentStep === steps.length - 1) {
      await onSubmit(methods.getValues());
      return;
    }
    
    const isValid = await methods.trigger();
    if (isValid) {
      setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
    }
  };

  const goToPrevStep = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };
  
  const onSubmit = async (data: TankFormData) => {
    // Here you would typically send the data to your backend
    console.log('Form submitted:', data);
    alert('Form submitted successfully! Check console for details.');
  };

  const formValues = methods.watch();

  return (
    <div className="max-w-6xl mx-auto px-8 py-20 bg-white min-h-screen">
      <h1 className="text-4xl font-semibold text-center mb-1 text-neutral-800 tracking-tight">Talpų Konfigūratorius</h1>
      <p className="text-center text-neutral-500 mb-16 max-w-md mx-auto">Sukonfigūruokite savo talpos parametrus pagal jūsų poreikius</p>
      
      <div className="mb-20 max-w-3xl mx-auto">
        <FormStepper steps={steps} currentStep={currentStep} />
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-16">
        {/* 3D Preview - Takes 3/5 width on large screens */}
        <div className="lg:col-span-3 lg:order-2">
          <div className="sticky top-8">
            <h2 className="text-sm font-semibold uppercase tracking-wider mb-4 text-neutral-400">Vizualizacija</h2>
            <div className="overflow-hidden">
              <Tank3DPreview formData={formValues} />
            </div>
            <div className="mt-3 text-xs text-neutral-400 text-center">Pasukite objektą pele norėdami apžiūrėti iš skirtingų pusių</div>
          </div>
        </div>
        
        {/* Form - Takes 2/5 width on large screens */}
        <div className="lg:col-span-2 lg:order-1">
          <FormProvider {...methods}>
            <form onSubmit={methods.handleSubmit(onSubmit)}>
              <div className="mb-10">
                <h2 className="text-sm font-semibold uppercase tracking-wider mb-4 text-neutral-400">Nustatymai</h2>
                <div className="bg-neutral-50 p-8 rounded-3xl">
                  {stepComponents[currentStep]}
                </div>
              </div>
              
              <div className="mt-8 flex justify-between">
                <Button
                  label="Atgal"
                  onClick={goToPrevStep}
                  variant="outline"
                  disabled={currentStep === 0}
                />
                <Button
                  label={currentStep === steps.length - 1 ? 'Pateikti' : 'Toliau'}
                  onClick={goToNextStep}
                  type="button"
                />
              </div>
            </form>
          </FormProvider>
        </div>
      </div>
    </div>
  );
};

export default TankConfigForm;
